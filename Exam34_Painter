import java.util.Arrays;
import java.util.Comparator;
import java.util.Scanner;
public class Main {
    public static int nn,anss;//anss为已配制出的grey毫升数
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N, arr[], grey, max=0, j;
        /*nn = N;
        j = ((max - 1) / 50 + 1);
        if (j == 0 && grey != 0) j++;
        System.out.println(f(arr, N, grey, j));*/
       while (true) {
            max = 0;
            N = sc.nextInt();
            if (N == 0) break;
            arr = new int[N];
            for (int i = 0; i < N; i++) {
                arr[i] = sc.nextInt();
                max = Math.max(arr[i], max);
            }
            grey = sc.nextInt();
            nn = N;
            j = (max - 1) / 50 + 1;
           // if (max == 0 && grey != 0) j++;
            if (max == 0 && grey == 0)  System.out.println(0);
            else System.out.println(f(arr, N, grey, j));
        }
    }
 //                                            j是最低套装数
    private static int f(int[] arr, int n, int grey,int j) {
        int ans=0,remainder,sum;
        Integer rmd[];
        rmd = new Integer[n];
        for(int i = j; i< 1000 ; i++) {
            sum = 50*i;
            for(int k = 0; k< n; k++)
                  rmd[k] = sum-arr[k];//买套装后各种类剩余的毫升数,若它们配制出>=grey即可
            anss = 0;
            nn  = n;
            int asnss = dfs(rmd);
            if(asnss>=grey) {ans = i;break;}
        }
        return ans;
    }
   static class cmp implements Comparator<Integer>{
        public int compare(Integer o1,Integer o2){
          return o2-o1;
        }
    }
    static int dfs(Integer rmd[]){
        Arrays.sort(rmd,new cmp());//逆序排序
        nn = Qu0(rmd,nn); //去掉0更新nn
       if(nn<3) return anss;//无法再配置直接返回
       // if (rmd[2]==0) return anss;
        //如果是为相等数组
        if(equal(rmd,nn)) {
            anss+=((rmd[0]*nn-(rmd[0]*nn)%3)/3);
          return anss;}
        //如果不是
        else {
            rmd[0] = rmd[0]-1;rmd[1] = rmd[1]-1; rmd[2] = rmd[2]-1;
            anss++;
            dfs(rmd);
        }
        return anss;
    }
    public static int Qu0(Integer arr[],int n){
        int i;
        for(i = 0; i< n; i++)
            if((arr[i]&0xFFFFFFFF)==0) break;
            return i;
    }
    public static boolean equal(Integer  arr[],int n){
        int tem = arr[0],crr;
        for(int i = 1; i< n; i++) {
             crr=arr[i]&tem;
             if(crr != tem) return false;
        }
        return true;
    }
    public static boolean equal(int arr[],int n){
        int tem = arr[0],crr;
        for(int i = 1; i< n; i++) {
            crr=arr[i]&tem;
            if(crr != tem) return false;
        }
        return true;
    }
}
